{
  "address": "0x439cfe110ac427E69E4aF94D93Da70F4516b108C",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_rewardTokenAddress",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_lpTokenAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target",
          "type": "address"
        }
      ],
      "name": "AddressEmptyCode",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "AddressInsufficientBalance",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FailedInnerCall",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "SafeERC20FailedOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Deposited",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "UnStaked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "balances",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimableReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "deleteRewardPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "depositAndStartStake",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "endStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "endStakeAndWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentRewardPeriodId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardPeriodsCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardsStats",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "claimableRewards",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardsPaid",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardRate",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardsPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingRewardPool.RewardsStats",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStakedBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "from",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "to",
          "type": "uint256"
        }
      ],
      "name": "newRewardPeriod",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "rewardPeriods",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "id",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "reward",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "from",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "to",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastUpdated",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rewardPerTokenStaked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "totalRewardsPaid",
              "type": "uint256"
            }
          ],
          "internalType": "struct StakingRewardPool.RewardPeriod",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "stakers",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "stakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "startStake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalStakes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x5631c08c22a5c8847f5f19b0771eacb20bd51b63b55f952801405c8195dd9fb4",
  "receipt": {
    "to": null,
    "from": "0x2443b0F5903755fC96978e089c8C85CF00Ef3A0f",
    "contractAddress": "0x439cfe110ac427E69E4aF94D93Da70F4516b108C",
    "transactionIndex": 1,
    "gasUsed": "25015541",
    "logsBloom": "0x
    "blockHash": "0xf7de32d3438dc433df2f5151f07fa50b9e8e2d45f1ab103e7932738470893c6e",
    "transactionHash": "0x5631c08c22a5c8847f5f19b0771eacb20bd51b63b55f952801405c8195dd9fb4",
    "logs": [
      {
        "transactionIndex": 1,
        "blockNumber": 36899,
        "transactionHash": "0x5631c08c22a5c8847f5f19b0771eacb20bd51b63b55f952801405c8195dd9fb4",
        "address": "0x439cfe110ac427E69E4aF94D93Da70F4516b108C",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002443b0f5903755fc96978e089c8c85cf00ef3a0f"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xf7de32d3438dc433df2f5151f07fa50b9e8e2d45f1ab103e7932738470893c6e"
      }
    ],
    "blockNumber": 36899,
    "cumulativeGasUsed": "25015541",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xBf9DFbeFE31F28891d95DBBC1a820Db364d9e80A",
    "0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE"
  ],
  "numDeployments": 1,
  "solcInputHash": "076a7278996fb05cbfaf918654cf8dda",
  "metadata": "{\"compiler\":{\"version\":\"0.8.24+commit.e11b9ed9\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_rewardTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_lpTokenAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"}],\"name\":\"AddressEmptyCode\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"AddressInsufficientBalance\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FailedInnerCall\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"SafeERC20FailedOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Deposited\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"UnStaked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"balances\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimableReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"deleteRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"depositAndStartStake\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"endStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"endStakeAndWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentRewardPeriodId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardPeriodsCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardsStats\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"claimableRewards\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardsPaid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardRate\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewardPool.RewardsStats\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStakedBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"}],\"name\":\"newRewardPeriod\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"rewardPeriods\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"id\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"from\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"to\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastUpdated\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rewardPerTokenStaked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"totalRewardsPaid\",\"type\":\"uint256\"}],\"internalType\":\"struct StakingRewardPool.RewardPeriod\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"stakers\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"stakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"startStake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalStakes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"AddressEmptyCode(address)\":[{\"details\":\"There's no code at `target` (it is not a contract).\"}],\"AddressInsufficientBalance(address)\":[{\"details\":\"The ETH balance of the account is not enough to perform the operation.\"}],\"FailedInnerCall()\":[{\"details\":\"A call to an address target failed. The target may have reverted.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}],\"SafeERC20FailedOperation(address)\":[{\"details\":\"An operation with an ERC20 token failed.\"}]},\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"notice\":\"Pool contract to distribute reward tokens among LP token stakers proportionally to the amount and duration of the their stakes. The owner can setup multiple reward periods each one with a pre-allocated amount of reward tokens to be distributed. Users are free to add and remove tokens to their stake at any time. Users can also claim their pending reward at any time. The pool implements an efficient O(1) algo to distribute the rewards based on this paper: https://uploads-ssl.webflow.com/5ad71ffeb79acc67c8bcdaba/5ad8d1193a40977462982470_scalable-reward-distribution-paper.pdf\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/StakingRewardPool.sol\":\"StakingRewardPool\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {Context} from \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    constructor(address initialOwner) {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xff6d0bb2e285473e5311d9d3caacb525ae3538a80758c10649a4d61029b017bb\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the value of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the value of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets a `value` amount of tokens as the allowance of `spender` over the\\n     * caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 value) external returns (bool);\\n\\n    /**\\n     * @dev Moves a `value` amount of tokens from `from` to `to` using the\\n     * allowance mechanism. `value` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address from, address to, uint256 value) external returns (bool);\\n}\\n\",\"keccak256\":\"0xc6a8ff0ea489379b61faa647490411b80102578440ab9d84e9a957cc12164e70\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/extensions/IERC20Permit.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n *\\n * ==== Security Considerations\\n *\\n * There are two important considerations concerning the use of `permit`. The first is that a valid permit signature\\n * expresses an allowance, and it should not be assumed to convey additional meaning. In particular, it should not be\\n * considered as an intention to spend the allowance in any specific way. The second is that because permits have\\n * built-in replay protection and can be submitted by anyone, they can be frontrun. A protocol that uses permits should\\n * take this into consideration and allow a `permit` call to fail. Combining these two aspects, a pattern that may be\\n * generally recommended is:\\n *\\n * ```solidity\\n * function doThingWithPermit(..., uint256 value, uint256 deadline, uint8 v, bytes32 r, bytes32 s) public {\\n *     try token.permit(msg.sender, address(this), value, deadline, v, r, s) {} catch {}\\n *     doThing(..., value);\\n * }\\n *\\n * function doThing(..., uint256 value) public {\\n *     token.safeTransferFrom(msg.sender, address(this), value);\\n *     ...\\n * }\\n * ```\\n *\\n * Observe that: 1) `msg.sender` is used as the owner, leaving no ambiguity as to the signer intent, and 2) the use of\\n * `try/catch` allows the permit to fail and makes the code tolerant to frontrunning. (See also\\n * {SafeERC20-safeTransferFrom}).\\n *\\n * Additionally, note that smart contract wallets (such as Argent or Safe) are not able to produce permit signatures, so\\n * contracts should have entry points that don't rely on permit.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     *\\n     * CAUTION: See Security Considerations above.\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x6008dabfe393240d73d7dd7688033f72740d570aa422254d29a7dce8568f3aff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC20} from \\\"../IERC20.sol\\\";\\nimport {IERC20Permit} from \\\"../extensions/IERC20Permit.sol\\\";\\nimport {Address} from \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    /**\\n     * @dev An operation with an ERC20 token failed.\\n     */\\n    error SafeERC20FailedOperation(address token);\\n\\n    /**\\n     * @dev Indicates a failed `decreaseAllowance` request.\\n     */\\n    error SafeERC20FailedDecreaseAllowance(address spender, uint256 currentAllowance, uint256 requestedDecrease);\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from the calling contract to `to`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransfer(IERC20 token, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transfer, (to, value)));\\n    }\\n\\n    /**\\n     * @dev Transfer `value` amount of `token` from `from` to `to`, spending the approval given by `from` to the\\n     * calling contract. If `token` returns no value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeTransferFrom(IERC20 token, address from, address to, uint256 value) internal {\\n        _callOptionalReturn(token, abi.encodeCall(token.transferFrom, (from, to, value)));\\n    }\\n\\n    /**\\n     * @dev Increase the calling contract's allowance toward `spender` by `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful.\\n     */\\n    function safeIncreaseAllowance(IERC20 token, address spender, uint256 value) internal {\\n        uint256 oldAllowance = token.allowance(address(this), spender);\\n        forceApprove(token, spender, oldAllowance + value);\\n    }\\n\\n    /**\\n     * @dev Decrease the calling contract's allowance toward `spender` by `requestedDecrease`. If `token` returns no\\n     * value, non-reverting calls are assumed to be successful.\\n     */\\n    function safeDecreaseAllowance(IERC20 token, address spender, uint256 requestedDecrease) internal {\\n        unchecked {\\n            uint256 currentAllowance = token.allowance(address(this), spender);\\n            if (currentAllowance < requestedDecrease) {\\n                revert SafeERC20FailedDecreaseAllowance(spender, currentAllowance, requestedDecrease);\\n            }\\n            forceApprove(token, spender, currentAllowance - requestedDecrease);\\n        }\\n    }\\n\\n    /**\\n     * @dev Set the calling contract's allowance toward `spender` to `value`. If `token` returns no value,\\n     * non-reverting calls are assumed to be successful. Meant to be used with tokens that require the approval\\n     * to be set to zero before setting it to a non-zero value, such as USDT.\\n     */\\n    function forceApprove(IERC20 token, address spender, uint256 value) internal {\\n        bytes memory approvalCall = abi.encodeCall(token.approve, (spender, value));\\n\\n        if (!_callOptionalReturnBool(token, approvalCall)) {\\n            _callOptionalReturn(token, abi.encodeCall(token.approve, (spender, 0)));\\n            _callOptionalReturn(token, approvalCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data);\\n        if (returndata.length != 0 && !abi.decode(returndata, (bool))) {\\n            revert SafeERC20FailedOperation(address(token));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     *\\n     * This is a variant of {_callOptionalReturn} that silents catches all reverts and returns a bool instead.\\n     */\\n    function _callOptionalReturnBool(IERC20 token, bytes memory data) private returns (bool) {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We cannot use {Address-functionCall} here since this should return false\\n        // and not revert is the subcall reverts.\\n\\n        (bool success, bytes memory returndata) = address(token).call(data);\\n        return success && (returndata.length == 0 || abi.decode(returndata, (bool))) && address(token).code.length > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x37bb49513c49c87c4642a891b13b63571bc87013dde806617aa1efb54605f386\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev The ETH balance of the account is not enough to perform the operation.\\n     */\\n    error AddressInsufficientBalance(address account);\\n\\n    /**\\n     * @dev There's no code at `target` (it is not a contract).\\n     */\\n    error AddressEmptyCode(address target);\\n\\n    /**\\n     * @dev A call to an address target failed. The target may have reverted.\\n     */\\n    error FailedInnerCall();\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        if (address(this).balance < amount) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        if (!success) {\\n            revert FailedInnerCall();\\n        }\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason or custom error, it is bubbled\\n     * up by this function (like regular Solidity function calls). However, if\\n     * the call reverted with no returned reason, this function reverts with a\\n     * {FailedInnerCall} error.\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        if (address(this).balance < value) {\\n            revert AddressInsufficientBalance(address(this));\\n        }\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\\n     * unsuccessful call.\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata\\n    ) internal view returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            // only check if target is a contract if the call was successful and the return data is empty\\n            // otherwise we already know that it was a contract\\n            if (returndata.length == 0 && target.code.length == 0) {\\n                revert AddressEmptyCode(target);\\n            }\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\\n     * revert reason or with a default {FailedInnerCall} error.\\n     */\\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\\n        if (!success) {\\n            _revert(returndata);\\n        } else {\\n            return returndata;\\n        }\\n    }\\n\\n    /**\\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\\n     */\\n    function _revert(bytes memory returndata) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert FailedInnerCall();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xaf28a975a78550e45f65e559a3ad6a5ad43b9b8a37366999abd1b7084eb70721\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0x493033a8d1b176a037b2cc6a04dad01a5c157722049bbecf632ca876224dd4b2\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    /**\\n     * @dev Muldiv operation overflow.\\n     */\\n    error MathOverflowedMulDiv();\\n\\n    enum Rounding {\\n        Floor, // Toward negative infinity\\n        Ceil, // Toward positive infinity\\n        Trunc, // Toward zero\\n        Expand // Away from zero\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            uint256 c = a + b;\\n            if (c < a) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, with an overflow flag.\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b > a) return (false, 0);\\n            return (true, a - b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n            // benefit is lost if 'b' is also tested.\\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n            if (a == 0) return (true, 0);\\n            uint256 c = a * b;\\n            if (c / a != b) return (false, 0);\\n            return (true, c);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a / b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        unchecked {\\n            if (b == 0) return (false, 0);\\n            return (true, a % b);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds towards infinity instead\\n     * of rounding towards zero.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (b == 0) {\\n            // Guarantee the same behavior as in a regular Solidity division.\\n            return a / b;\\n        }\\n\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or\\n     * denominator == 0.\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv) with further edits by\\n     * Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0 = x * y; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                // Solidity will revert if denominator == 0, unlike the div opcode on its own.\\n                // The surrounding unchecked block does not change this fact.\\n                // See https://docs.soliditylang.org/en/latest/control-structures.html#checked-or-unchecked-arithmetic.\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            if (denominator <= prod1) {\\n                revert MathOverflowedMulDiv();\\n            }\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator.\\n            // Always >= 1. See https://cs.stackexchange.com/q/138556/92363.\\n\\n            uint256 twos = denominator & (0 - denominator);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also\\n            // works in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(uint256 x, uint256 y, uint256 denominator, Rounding rounding) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (unsignedRoundsUp(rounding) && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded\\n     * towards zero.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (unsignedRoundsUp(rounding) && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10 ** 64) {\\n                value /= 10 ** 64;\\n                result += 64;\\n            }\\n            if (value >= 10 ** 32) {\\n                value /= 10 ** 32;\\n                result += 32;\\n            }\\n            if (value >= 10 ** 16) {\\n                value /= 10 ** 16;\\n                result += 16;\\n            }\\n            if (value >= 10 ** 8) {\\n                value /= 10 ** 8;\\n                result += 8;\\n            }\\n            if (value >= 10 ** 4) {\\n                value /= 10 ** 4;\\n                result += 4;\\n            }\\n            if (value >= 10 ** 2) {\\n                value /= 10 ** 2;\\n                result += 2;\\n            }\\n            if (value >= 10 ** 1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (unsignedRoundsUp(rounding) && 10 ** result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256 of a positive value rounded towards zero.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (unsignedRoundsUp(rounding) && 1 << (result << 3) < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns whether a provided rounding mode is considered rounding up for unsigned integers.\\n     */\\n    function unsignedRoundsUp(Rounding rounding) internal pure returns (bool) {\\n        return uint8(rounding) % 2 == 1;\\n    }\\n}\\n\",\"keccak256\":\"0x005ec64c6313f0555d59e278f9a7a5ab2db5bdc72a027f255a37c327af1ec02d\",\"license\":\"MIT\"},\"contracts/StakingPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"@openzeppelin/contracts/utils/math/Math.sol\\\";\\n\\nimport \\\"./Wallet.sol\\\";\\n\\ncontract StakingPool is Wallet {\\n    event Staked(address indexed user, uint amount);\\n    event UnStaked(address indexed user, uint256 amount);\\n\\n    address[] public stakers; // addresses that have active stakes\\n    mapping(address => uint) public stakes;\\n    uint public totalStakes;\\n\\n    constructor(address, address _lpTokenAddress) Wallet(_lpTokenAddress) {}\\n\\n    function depositAndStartStake(uint256 amount) public payable {\\n        deposit(amount);\\n        startStake(amount);\\n    }\\n\\n    function endStakeAndWithdraw(uint amount) public {\\n        endStake(amount);\\n        withdraw(amount);\\n    }\\n\\n    function startStake(uint amount) public virtual {\\n        require(amount > 0, \\\"Stake must be a positive amount greater than 0\\\");\\n        require(balances[msg.sender] >= amount, \\\"Not enough tokens to stake\\\");\\n\\n        // move tokens from lp token balance to the staked balance\\n        balances[msg.sender] -= amount;\\n        stakes[msg.sender] += amount;\\n\\n        totalStakes += amount;\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function endStake(uint amount) public virtual {\\n        require(stakes[msg.sender] >= amount, \\\"Not enough tokens staked\\\");\\n\\n        // return lp tokens to lp token balance\\n        balances[msg.sender] += amount;\\n        stakes[msg.sender] -= amount;\\n\\n        totalStakes -= amount;\\n\\n        emit UnStaked(msg.sender, amount);\\n    }\\n\\n    // TODO:- take in account rather than msg.sender\\n    function getStakedBalance() public view returns (uint) {\\n        return stakes[msg.sender];\\n    }\\n}\\n\",\"keccak256\":\"0x94423a556578e3e6121cc277dc9db8a2f63c6eb34dadc18fa0447e26e444c9dd\",\"license\":\"MIT\"},\"contracts/StakingRewardPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport \\\"./StakingPool.sol\\\";\\n\\n/**\\n * Pool contract to distribute reward tokens among LP token stakers proportionally to the amount and duration of the their stakes.\\n * The owner can setup multiple reward periods each one with a pre-allocated amount of reward tokens to be distributed.\\n * Users are free to add and remove tokens to their stake at any time.\\n * Users can also claim their pending reward at any time.\\n\\n * The pool implements an efficient O(1) algo to distribute the rewards based on this paper:\\n * https://uploads-ssl.webflow.com/5ad71ffeb79acc67c8bcdaba/5ad8d1193a40977462982470_scalable-reward-distribution-paper.pdf\\n */\\ncontract StakingRewardPool is StakingPool {\\n    event RewardPaid(address indexed user, uint256 reward);\\n\\n    struct RewardPeriod {\\n        uint id;\\n        uint reward;\\n        uint from;\\n        uint to;\\n        uint lastUpdated; // when the totalStakedWeight was last updated (after last stake was ended)\\n        uint totalStaked; // T: sum of all active stake deposits\\n        uint rewardPerTokenStaked; // S: SUM(reward/T) - sum of all rewards distributed divided all active stakes\\n        uint totalRewardsPaid;\\n    }\\n\\n    struct UserInfo {\\n        uint userRewardPerTokenStaked;\\n        uint pendingRewards;\\n        uint rewardsPaid;\\n    }\\n\\n    struct RewardsStats {\\n        // user stats\\n        uint claimableRewards;\\n        uint rewardsPaid;\\n        // general stats\\n        uint rewardRate;\\n        uint totalRewardsPaid;\\n    }\\n\\n    IERC20 internal rewardToken;\\n    RewardPeriod[] _rewardPeriods;\\n    uint rewardPeriodsCount = 0;\\n\\n    function rewardPeriods(uint index) public view returns (RewardPeriod memory) {\\n        return _rewardPeriods[index];\\n    }\\n\\n    mapping(address => UserInfo) userInfos;\\n\\n    // mapping(address => uint) userRewardPerTokenStaked;\\n    // mapping (address => uint) pendingRewards;\\n\\n    uint constant rewardPrecision = 1e9;\\n\\n    constructor(\\n        address _rewardTokenAddress,\\n        address _lpTokenAddress\\n    ) StakingPool(_rewardTokenAddress, _lpTokenAddress) {\\n        rewardToken = IERC20(_rewardTokenAddress);\\n    }\\n\\n    function newRewardPeriod(uint reward, uint from, uint to) public onlyOwner {\\n        require(reward > 0, \\\"Invalid reward period amount\\\");\\n        require(to > from && to > block.timestamp, \\\"Invalid reward period interval\\\");\\n        require(\\n            _rewardPeriods.length == 0 || from > _rewardPeriods[_rewardPeriods.length - 1].to,\\n            \\\"Invalid period start time\\\"\\n        );\\n\\n        _rewardPeriods.push(\\n            RewardPeriod({\\n                id: _rewardPeriods.length + 1,\\n                reward: reward,\\n                from: from,\\n                to: to,\\n                lastUpdated: block.timestamp,\\n                totalStaked: 0,\\n                rewardPerTokenStaked: 0,\\n                totalRewardsPaid: 0\\n            })\\n        );\\n        rewardPeriodsCount = _rewardPeriods.length;\\n        depositReward(reward);\\n    }\\n\\n    function getRewardPeriodsCount() public view returns (uint) {\\n        return rewardPeriodsCount;\\n    }\\n\\n    function deleteRewardPeriod(uint index) public onlyOwner {\\n        require(_rewardPeriods.length > index, \\\"Invalid reward phase index\\\");\\n        for (uint i = index; i < _rewardPeriods.length - 1; i++) {\\n            _rewardPeriods[i] = _rewardPeriods[i + 1];\\n        }\\n        _rewardPeriods.pop();\\n        rewardPeriodsCount = _rewardPeriods.length;\\n    }\\n\\n    function rewardBalance() public view returns (uint) {\\n        return rewardToken.balanceOf(address(this));\\n    }\\n\\n    // Deposit reward token into this contract\\n    function depositReward(uint amount) internal onlyOwner {\\n        rewardToken.transferFrom(msg.sender, address(this), amount);\\n    }\\n\\n    function startStake(uint amount) public override {\\n        uint periodId = getCurrentRewardPeriodId();\\n        require(periodId > 0, \\\"No active reward period found\\\");\\n        update();\\n\\n        super.startStake(amount);\\n\\n        // update total tokens staked\\n        RewardPeriod storage period = _rewardPeriods[periodId - 1];\\n        period.totalStaked += amount;\\n    }\\n\\n    function endStake(uint amount) public override {\\n        update();\\n        super.endStake(amount);\\n\\n        // update total tokens staked\\n        uint periodId = getCurrentRewardPeriodId();\\n        RewardPeriod storage period = _rewardPeriods[periodId - 1];\\n        period.totalStaked -= amount;\\n\\n        claim();\\n    }\\n\\n    function claimableReward() public view returns (uint) {\\n        uint periodId = getCurrentRewardPeriodId();\\n        if (periodId == 0) return 0;\\n\\n        RewardPeriod memory period = _rewardPeriods[periodId - 1];\\n        uint newRewardDistribution = calculateRewardDistribution(period);\\n        uint reward = calculateReward(newRewardDistribution);\\n\\n        UserInfo memory userInfo = userInfos[msg.sender];\\n        uint pending = userInfo.pendingRewards;\\n\\n        return pending + reward;\\n    }\\n\\n    function claimReward() public {\\n        update();\\n        claim();\\n    }\\n\\n    function claim() internal {\\n        UserInfo storage userInfo = userInfos[msg.sender];\\n        uint rewards = userInfo.pendingRewards;\\n        if (rewards != 0) {\\n            userInfo.pendingRewards = 0;\\n\\n            uint periodId = getCurrentRewardPeriodId();\\n            RewardPeriod storage period = _rewardPeriods[periodId - 1];\\n            period.totalRewardsPaid += rewards;\\n\\n            payReward(msg.sender, rewards);\\n        }\\n    }\\n\\n    function getCurrentRewardPeriodId() public view returns (uint) {\\n        if (rewardPeriodsCount == 0) return 0;\\n        for (uint i = _rewardPeriods.length; i > 0; i--) {\\n            RewardPeriod memory period = _rewardPeriods[i - 1];\\n            if (period.from <= block.timestamp && period.to >= block.timestamp) {\\n                return period.id;\\n            }\\n        }\\n        return 0;\\n    }\\n\\n    function getRewardsStats() public view returns (RewardsStats memory) {\\n        UserInfo memory userInfo = userInfos[msg.sender];\\n\\n        RewardsStats memory stats = RewardsStats({\\n            claimableRewards: 0,\\n            rewardsPaid: 0,\\n            rewardRate: 0,\\n            totalRewardsPaid: 0\\n        });\\n\\n        // user stats\\n        stats.claimableRewards = claimableReward();\\n        stats.rewardsPaid = userInfo.rewardsPaid;\\n\\n        // reward period stats\\n        uint periodId = getCurrentRewardPeriodId();\\n        if (periodId > 0) {\\n            RewardPeriod memory period = _rewardPeriods[periodId - 1];\\n            stats.rewardRate = rewardRate(period);\\n            stats.totalRewardsPaid = period.totalRewardsPaid;\\n        }\\n\\n        return stats;\\n    }\\n\\n    function rewardRate(RewardPeriod memory period) internal pure returns (uint) {\\n        uint duration = period.to - period.from;\\n        return period.reward / duration;\\n    }\\n\\n    function payReward(address account, uint reward) internal {\\n        UserInfo storage userInfo = userInfos[msg.sender];\\n        userInfo.rewardsPaid += reward;\\n        rewardToken.transfer(account, reward);\\n\\n        emit RewardPaid(account, reward);\\n    }\\n\\n    /// Reward calcualtion logic\\n\\n    function update() internal {\\n        uint periodId = getCurrentRewardPeriodId();\\n        require(periodId > 0, \\\"No active reward period found\\\");\\n\\n        RewardPeriod storage period = _rewardPeriods[periodId - 1];\\n        uint rewardDistribuedPerToken = calculateRewardDistribution(period);\\n\\n        // update pending rewards reward since rewardPerTokenStaked was updated\\n        uint reward = calculateReward(rewardDistribuedPerToken);\\n        UserInfo storage userInfo = userInfos[msg.sender];\\n        userInfo.pendingRewards += reward;\\n        userInfo.userRewardPerTokenStaked = rewardDistribuedPerToken;\\n\\n        require(\\n            rewardDistribuedPerToken >= period.rewardPerTokenStaked,\\n            \\\"Reward distribution should be monotonic increasing\\\"\\n        );\\n\\n        period.rewardPerTokenStaked = rewardDistribuedPerToken;\\n        period.lastUpdated = block.timestamp;\\n    }\\n\\n    function calculateRewardDistribution(RewardPeriod memory period) internal view returns (uint) {\\n        // calculate total reward to be distributed since period.lastUpdated\\n        uint rate = rewardRate(period);\\n        uint deltaTime = block.timestamp - period.lastUpdated;\\n        uint reward = deltaTime * rate;\\n\\n        uint newRewardPerTokenStaked = period.rewardPerTokenStaked; // 0\\n        if (period.totalStaked != 0) {\\n            // S = S + r / T\\n            newRewardPerTokenStaked += (reward * rewardPrecision) / period.totalStaked;\\n        }\\n\\n        return newRewardPerTokenStaked;\\n    }\\n\\n    function calculateReward(uint rewardDistribution) internal view returns (uint) {\\n        if (rewardDistribution == 0) return 0;\\n\\n        uint staked = stakes[msg.sender];\\n        UserInfo memory userInfo = userInfos[msg.sender];\\n        uint reward = (staked * (rewardDistribution - userInfo.userRewardPerTokenStaked)) / rewardPrecision;\\n\\n        return reward;\\n    }\\n}\\n\",\"keccak256\":\"0x1b4204d3280b66a1e39ee4bdd5346ad03154963c8e1dbf3ffeb9c82bcf4b7ee9\",\"license\":\"MIT\"},\"contracts/Wallet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.20;\\n\\nimport {Ownable} from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\ncontract Wallet is Ownable {\\n    // Use this address to represent native ETH, rather than ERC20 token\\n    address internal constant NATIVE = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    event Deposited(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n\\n    IERC20 internal token;\\n\\n    // Token balances\\n    mapping(address => uint256) public balances;\\n\\n    // users that deposited tokens into their balances\\n    address[] internal usersArray;\\n    mapping(address => bool) internal users;\\n\\n    constructor(address token_) Ownable(msg.sender) {\\n        token = IERC20(token_);\\n    }\\n\\n    function getBalance() external view returns (uint256) {\\n        return balances[msg.sender];\\n    }\\n\\n    function deposit(uint256 amount) public payable {\\n        require(amount > 0, \\\"Deposit amount should not be 0\\\");\\n\\n        if (address(token) == NATIVE) {\\n            require(amount == msg.value, \\\"Value mismatch\\\");\\n        } else {\\n            require(token.allowance(msg.sender, address(this)) >= amount, \\\"Insufficient allowance\\\");\\n            SafeERC20.safeTransferFrom(token, msg.sender, address(this), amount);\\n        }\\n\\n        // remember addresses that deposited tokens\\n        if (!users[msg.sender]) {\\n            users[msg.sender] = true;\\n            usersArray.push(msg.sender);\\n        }\\n\\n        balances[msg.sender] += amount;\\n\\n        emit Deposited(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public {\\n        require(balances[msg.sender] >= amount, \\\"Insufficient token balance\\\");\\n\\n        balances[msg.sender] -= amount;\\n        if (address(token) == NATIVE) {\\n            payable(msg.sender).transfer(amount);\\n        } else {\\n            SafeERC20.safeTransfer(token, msg.sender, amount);\\n        }\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n}\\n\",\"keccak256\":\"0xb75503b130796e10f678c6bd80380f24903582af5aba609b34161998854933e0\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000600a553480156200001657600080fd5b50604051620035073803806200350783398181016040528101906200003c919062000282565b81818033600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1603620000b55760006040517f1e4fbdf7000000000000000000000000000000000000000000000000000000008152600401620000ac9190620002da565b60405180910390fd5b620000c6816200015460201b60201c565b5080600160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050505081600860006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505050620002f7565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200024a826200021d565b9050919050565b6200025c816200023d565b81146200026857600080fd5b50565b6000815190506200027c8162000251565b92915050565b600080604083850312156200029c576200029b62000218565b5b6000620002ac858286016200026b565b9250506020620002bf858286016200026b565b9150509250929050565b620002d4816200023d565b82525050565b6000602082019050620002f16000830184620002c9565b92915050565b61320080620003076000396000f3fe60806040526004361061014b5760003560e01c80638da5cb5b116100b6578063bf9befb11161006f578063bf9befb114610449578063d9c5fbed14610474578063e7181edc14610490578063f2fde38b146104bb578063fad0138d146104e4578063fd5e6dd11461050f5761014b565b80638da5cb5b1461036e578063aa5c3ab414610399578063aaf63640146103c4578063b51bd40f146103ed578063b6b55f2514610416578063b88a802f146104325761014b565b80632e1a7d4d116101085780632e1a7d4d1461027257806333b365d61461029b5780635865b911146102c4578063715018a6146102ef57806376965867146103065780638252097d146103315761014b565b80630cbe28d61461015057806312065fe01461017957806316934fc4146101a457806318e01ec5146101e157806327e235e31461020a5780632ad7b6a914610247575b600080fd5b34801561015c57600080fd5b50610177600480360381019061017291906125dd565b61054c565b005b34801561018557600080fd5b5061018e6105c3565b60405161019b9190612619565b60405180910390f35b3480156101b057600080fd5b506101cb60048036038101906101c69190612692565b61060a565b6040516101d89190612619565b60405180910390f35b3480156101ed57600080fd5b50610208600480360381019061020391906125dd565b610622565b005b34801561021657600080fd5b50610231600480360381019061022c9190612692565b6107bb565b60405161023e9190612619565b60405180910390f35b34801561025357600080fd5b5061025c6107d3565b6040516102699190612723565b60405180910390f35b34801561027e57600080fd5b50610299600480360381019061029491906125dd565b61095d565b005b3480156102a757600080fd5b506102c260048036038101906102bd919061273e565b610b69565b005b3480156102d057600080fd5b506102d9610d6e565b6040516102e69190612619565b60405180910390f35b3480156102fb57600080fd5b50610304610e6c565b005b34801561031257600080fd5b5061031b610e80565b6040516103289190612619565b60405180910390f35b34801561033d57600080fd5b50610358600480360381019061035391906125dd565b610ec7565b6040516103659190612833565b60405180910390f35b34801561037a57600080fd5b50610383610f54565b604051610390919061285e565b60405180910390f35b3480156103a557600080fd5b506103ae610f7d565b6040516103bb9190612619565b60405180910390f35b3480156103d057600080fd5b506103eb60048036038101906103e691906125dd565b611020565b005b3480156103f957600080fd5b50610414600480360381019061040f91906125dd565b611035565b005b610430600480360381019061042b91906125dd565b6110e7565b005b34801561043e57600080fd5b5061044761149d565b005b34801561045557600080fd5b5061045e6114af565b60405161046b9190612619565b60405180910390f35b61048e600480360381019061048991906125dd565b6114b5565b005b34801561049c57600080fd5b506104a56114ca565b6040516104b29190612619565b60405180910390f35b3480156104c757600080fd5b506104e260048036038101906104dd9190612692565b61161e565b005b3480156104f057600080fd5b506104f96116a4565b6040516105069190612619565b60405180910390f35b34801561051b57600080fd5b50610536600480360381019061053191906125dd565b6116ae565b604051610543919061285e565b60405180910390f35b6105546116ed565b61055d816118ab565b6000610567610d6e565b90506000600960018361057a91906128a8565b8154811061058b5761058a6128dc565b5b90600052602060002090600802019050828160050160008282546105af91906128a8565b925050819055506105be611a43565b505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60066020528060005260406000206000915090505481565b61062a611b0b565b8060098054905011610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890612968565b60405180910390fd5b60008190505b600160098054905061068991906128a8565b81101561074057600960018261069f9190612988565b815481106106b0576106af6128dc565b5b9060005260206000209060080201600982815481106106d2576106d16128dc565b5b906000526020600020906008020160008201548160000155600182015481600101556002820154816002015560038201548160030155600482015481600401556005820154816005015560068201548160060155600782015481600701559050508080600101915050610677565b506009805480610753576107526129bc565b5b6001900381819060005260206000209060080201600080820160009055600182016000905560028201600090556003820160009055600482016000905560058201600090556006820160009055600782016000905550509055600980549050600a8190555050565b60026020528060005260406000206000915090505481565b6107db612535565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006040518060800160405280600081526020016000815260200160008152602001600081525090506108786114ca565b81600001818152505081604001518160200181815250506000610899610d6e565b9050600081111561095457600060096001836108b591906128a8565b815481106108c6576108c56128dc565b5b90600052602060002090600802016040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905061093b81611b92565b8360400181815250508060e00151836060018181525050505b81935050505090565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d690612a37565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a2e91906128a8565b9250508190555073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aea573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ae4573d6000803e3d6000fd5b50610b18565b610b17600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383611bc3565b5b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610b5e9190612619565b60405180910390a250565b610b71611b0b565b60008311610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab90612aa3565b60405180910390fd5b8181118015610bc257504281115b610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf890612b0f565b60405180910390fd5b60006009805490501480610c4a575060096001600980549050610c2491906128a8565b81548110610c3557610c346128dc565b5b90600052602060002090600802016003015482115b610c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8090612b7b565b60405180910390fd5b60096040518061010001604052806001600980549050610ca99190612988565b8152602001858152602001848152602001838152602001428152602001600081526020016000815260200160008152509080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701555050600980549050600a81905550610d6983611c42565b505050565b600080600a5403610d825760009050610e69565b600060098054905090505b6000811115610e635760006009600183610da791906128a8565b81548110610db857610db76128dc565b5b90600052602060002090600802016040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905042816040015111158015610e3c575042816060015110155b15610e4f57806000015192505050610e69565b508080610e5b90612b9b565b915050610d8d565b50600090505b90565b610e74611b0b565b610e7e6000611cf0565b565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b610ecf61255d565b60098281548110610ee357610ee26128dc565b5b906000526020600020906008020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fda919061285e565b602060405180830381865afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190612bd9565b905090565b6110298161054c565b6110328161095d565b50565b600061103f610d6e565b905060008111611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b90612c52565b60405180910390fd5b61108c6116ed565b61109582611db4565b600060096001836110a691906128a8565b815481106110b7576110b66128dc565b5b90600052602060002090600802019050828160050160008282546110db9190612988565b92505081905550505050565b6000811161112a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112190612cbe565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111da573481146111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cc90612d2a565b60405180910390fd5b6112e9565b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611238929190612d4a565b602060405180830381865afa158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190612bd9565b10156112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b190612dbf565b60405180910390fd5b6112e8600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333084611f8f565b5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166113f6576001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114459190612988565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4826040516114929190612619565b60405180910390a250565b6114a56116ed565b6114ad611a43565b565b60075481565b6114be816110e7565b6114c781611035565b50565b6000806114d5610d6e565b9050600081036114e957600091505061161b565b600060096001836114fa91906128a8565b8154811061150b5761150a6128dc565b5b906000526020600020906008020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050600061158282612011565b9050600061158f82612091565b90506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060008160200151905082816116129190612988565b96505050505050505b90565b611626611b0b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116985760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161168f919061285e565b60405180910390fd5b6116a181611cf0565b50565b6000600a54905090565b600581815481106116be57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006116f7610d6e565b90506000811161173c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173390612c52565b60405180910390fd5b6000600960018361174d91906128a8565b8154811061175e5761175d6128dc565b5b9060005260206000209060080201905060006117d5826040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050612011565b905060006117e282612091565b90506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600101600082825461183b9190612988565b925050819055508281600001819055508360060154831015611892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188990612e51565b60405180910390fd5b8284600601819055504284600401819055505050505050565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561192d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192490612ebd565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461197c9190612988565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119d291906128a8565b9250508190555080600760008282546119eb91906128a8565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f79d3df6837cc49ff0e09fd3258e6e45594e0703445bb06825e9d75156eaee8f082604051611a389190612619565b60405180910390a250565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154905060008114611b0757600082600101819055506000611aab610d6e565b905060006009600183611abe91906128a8565b81548110611acf57611ace6128dc565b5b9060005260206000209060080201905082816007016000828254611af39190612988565b92505081905550611b04338461218d565b50505b5050565b611b136122df565b73ffffffffffffffffffffffffffffffffffffffff16611b31610f54565b73ffffffffffffffffffffffffffffffffffffffff1614611b9057611b546122df565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611b87919061285e565b60405180910390fd5b565b60008082604001518360600151611ba991906128a8565b9050808360200151611bbb9190612f0c565b915050919050565b611c3d838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611bf6929190612f3d565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122e7565b505050565b611c4a611b0b565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611ca993929190612f66565b6020604051808303816000875af1158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190612fd5565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008111611df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dee90613074565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e70906130e0565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ec891906128a8565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f1e9190612988565b925050819055508060076000828254611f379190612988565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d82604051611f849190612619565b60405180910390a250565b61200b848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611fc493929190612f66565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122e7565b50505050565b60008061201d83611b92565b9050600083608001514261203191906128a8565b9050600082826120419190613100565b905060008560c00151905060008660a0015114612085578560a00151633b9aca008361206d9190613100565b6120779190612f0c565b816120829190612988565b90505b80945050505050919050565b60008082036120a35760009050612188565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000633b9aca0082600001518661216a91906128a8565b846121759190613100565b61217f9190612f0c565b90508093505050505b919050565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160008282546121e49190612988565b92505081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401612248929190612f3d565b6020604051808303816000875af1158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190612fd5565b508273ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486836040516122d29190612619565b60405180910390a2505050565b600033905090565b6000612312828473ffffffffffffffffffffffffffffffffffffffff1661237e90919063ffffffff16565b905060008151141580156123375750808060200190518101906123359190612fd5565b155b1561237957826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612370919061285e565b60405180910390fd5b505050565b606061238c83836000612394565b905092915050565b6060814710156123db57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016123d2919061285e565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161240491906131b3565b60006040518083038185875af1925050503d8060008114612441576040519150601f19603f3d011682016040523d82523d6000602084013e612446565b606091505b5091509150612456868383612461565b925050509392505050565b60608261247657612471826124f0565b6124e8565b6000825114801561249e575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156124e057836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016124d7919061285e565b60405180910390fd5b8190506124e9565b5b9392505050565b6000815111156125035780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080fd5b6000819050919050565b6125ba816125a7565b81146125c557600080fd5b50565b6000813590506125d7816125b1565b92915050565b6000602082840312156125f3576125f26125a2565b5b6000612601848285016125c8565b91505092915050565b612613816125a7565b82525050565b600060208201905061262e600083018461260a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061265f82612634565b9050919050565b61266f81612654565b811461267a57600080fd5b50565b60008135905061268c81612666565b92915050565b6000602082840312156126a8576126a76125a2565b5b60006126b68482850161267d565b91505092915050565b6126c8816125a7565b82525050565b6080820160008201516126e460008501826126bf565b5060208201516126f760208501826126bf565b50604082015161270a60408501826126bf565b50606082015161271d60608501826126bf565b50505050565b600060808201905061273860008301846126ce565b92915050565b600080600060608486031215612757576127566125a2565b5b6000612765868287016125c8565b9350506020612776868287016125c8565b9250506040612787868287016125c8565b9150509250925092565b610100820160008201516127a860008501826126bf565b5060208201516127bb60208501826126bf565b5060408201516127ce60408501826126bf565b5060608201516127e160608501826126bf565b5060808201516127f460808501826126bf565b5060a082015161280760a08501826126bf565b5060c082015161281a60c08501826126bf565b5060e082015161282d60e08501826126bf565b50505050565b6000610100820190506128496000830184612791565b92915050565b61285881612654565b82525050565b6000602082019050612873600083018461284f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128b3826125a7565b91506128be836125a7565b92508282039050818111156128d6576128d5612879565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f496e76616c69642072657761726420706861736520696e646578000000000000600082015250565b6000612952601a8361290b565b915061295d8261291c565b602082019050919050565b6000602082019050818103600083015261298181612945565b9050919050565b6000612993826125a7565b915061299e836125a7565b92508282019050808211156129b6576129b5612879565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000600082015250565b6000612a21601a8361290b565b9150612a2c826129eb565b602082019050919050565b60006020820190508181036000830152612a5081612a14565b9050919050565b7f496e76616c69642072657761726420706572696f6420616d6f756e7400000000600082015250565b6000612a8d601c8361290b565b9150612a9882612a57565b602082019050919050565b60006020820190508181036000830152612abc81612a80565b9050919050565b7f496e76616c69642072657761726420706572696f6420696e74657276616c0000600082015250565b6000612af9601e8361290b565b9150612b0482612ac3565b602082019050919050565b60006020820190508181036000830152612b2881612aec565b9050919050565b7f496e76616c696420706572696f642073746172742074696d6500000000000000600082015250565b6000612b6560198361290b565b9150612b7082612b2f565b602082019050919050565b60006020820190508181036000830152612b9481612b58565b9050919050565b6000612ba6826125a7565b915060008203612bb957612bb8612879565b5b600182039050919050565b600081519050612bd3816125b1565b92915050565b600060208284031215612bef57612bee6125a2565b5b6000612bfd84828501612bc4565b91505092915050565b7f4e6f206163746976652072657761726420706572696f6420666f756e64000000600082015250565b6000612c3c601d8361290b565b9150612c4782612c06565b602082019050919050565b60006020820190508181036000830152612c6b81612c2f565b9050919050565b7f4465706f73697420616d6f756e742073686f756c64206e6f7420626520300000600082015250565b6000612ca8601e8361290b565b9150612cb382612c72565b602082019050919050565b60006020820190508181036000830152612cd781612c9b565b9050919050565b7f56616c7565206d69736d61746368000000000000000000000000000000000000600082015250565b6000612d14600e8361290b565b9150612d1f82612cde565b602082019050919050565b60006020820190508181036000830152612d4381612d07565b9050919050565b6000604082019050612d5f600083018561284f565b612d6c602083018461284f565b9392505050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000612da960168361290b565b9150612db482612d73565b602082019050919050565b60006020820190508181036000830152612dd881612d9c565b9050919050565b7f52657761726420646973747269627574696f6e2073686f756c64206265206d6f60008201527f6e6f746f6e696320696e6372656173696e670000000000000000000000000000602082015250565b6000612e3b60328361290b565b9150612e4682612ddf565b604082019050919050565b60006020820190508181036000830152612e6a81612e2e565b9050919050565b7f4e6f7420656e6f75676820746f6b656e73207374616b65640000000000000000600082015250565b6000612ea760188361290b565b9150612eb282612e71565b602082019050919050565b60006020820190508181036000830152612ed681612e9a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f17826125a7565b9150612f22836125a7565b925082612f3257612f31612edd565b5b828204905092915050565b6000604082019050612f52600083018561284f565b612f5f602083018461260a565b9392505050565b6000606082019050612f7b600083018661284f565b612f88602083018561284f565b612f95604083018461260a565b949350505050565b60008115159050919050565b612fb281612f9d565b8114612fbd57600080fd5b50565b600081519050612fcf81612fa9565b92915050565b600060208284031215612feb57612fea6125a2565b5b6000612ff984828501612fc0565b91505092915050565b7f5374616b65206d757374206265206120706f73697469766520616d6f756e742060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b600061305e602e8361290b565b915061306982613002565b604082019050919050565b6000602082019050818103600083015261308d81613051565b9050919050565b7f4e6f7420656e6f75676820746f6b656e7320746f207374616b65000000000000600082015250565b60006130ca601a8361290b565b91506130d582613094565b602082019050919050565b600060208201905081810360008301526130f9816130bd565b9050919050565b600061310b826125a7565b9150613116836125a7565b9250828202613124816125a7565b9150828204841483151761313b5761313a612879565b5b5092915050565b600081519050919050565b600081905092915050565b60005b8381101561317657808201518184015260208101905061315b565b60008484015250505050565b600061318d82613142565b613197818561314d565b93506131a7818560208601613158565b80840191505092915050565b60006131bf8284613182565b91508190509291505056fea2646970667358221220c964e71fcb995211434123c6c0246a0f9d5aae527c0bb02bde80255a53d7d7ec64736f6c63430008180033",
  "deployedBytecode": "0x60806040526004361061014b5760003560e01c80638da5cb5b116100b6578063bf9befb11161006f578063bf9befb114610449578063d9c5fbed14610474578063e7181edc14610490578063f2fde38b146104bb578063fad0138d146104e4578063fd5e6dd11461050f5761014b565b80638da5cb5b1461036e578063aa5c3ab414610399578063aaf63640146103c4578063b51bd40f146103ed578063b6b55f2514610416578063b88a802f146104325761014b565b80632e1a7d4d116101085780632e1a7d4d1461027257806333b365d61461029b5780635865b911146102c4578063715018a6146102ef57806376965867146103065780638252097d146103315761014b565b80630cbe28d61461015057806312065fe01461017957806316934fc4146101a457806318e01ec5146101e157806327e235e31461020a5780632ad7b6a914610247575b600080fd5b34801561015c57600080fd5b50610177600480360381019061017291906125dd565b61054c565b005b34801561018557600080fd5b5061018e6105c3565b60405161019b9190612619565b60405180910390f35b3480156101b057600080fd5b506101cb60048036038101906101c69190612692565b61060a565b6040516101d89190612619565b60405180910390f35b3480156101ed57600080fd5b50610208600480360381019061020391906125dd565b610622565b005b34801561021657600080fd5b50610231600480360381019061022c9190612692565b6107bb565b60405161023e9190612619565b60405180910390f35b34801561025357600080fd5b5061025c6107d3565b6040516102699190612723565b60405180910390f35b34801561027e57600080fd5b50610299600480360381019061029491906125dd565b61095d565b005b3480156102a757600080fd5b506102c260048036038101906102bd919061273e565b610b69565b005b3480156102d057600080fd5b506102d9610d6e565b6040516102e69190612619565b60405180910390f35b3480156102fb57600080fd5b50610304610e6c565b005b34801561031257600080fd5b5061031b610e80565b6040516103289190612619565b60405180910390f35b34801561033d57600080fd5b50610358600480360381019061035391906125dd565b610ec7565b6040516103659190612833565b60405180910390f35b34801561037a57600080fd5b50610383610f54565b604051610390919061285e565b60405180910390f35b3480156103a557600080fd5b506103ae610f7d565b6040516103bb9190612619565b60405180910390f35b3480156103d057600080fd5b506103eb60048036038101906103e691906125dd565b611020565b005b3480156103f957600080fd5b50610414600480360381019061040f91906125dd565b611035565b005b610430600480360381019061042b91906125dd565b6110e7565b005b34801561043e57600080fd5b5061044761149d565b005b34801561045557600080fd5b5061045e6114af565b60405161046b9190612619565b60405180910390f35b61048e600480360381019061048991906125dd565b6114b5565b005b34801561049c57600080fd5b506104a56114ca565b6040516104b29190612619565b60405180910390f35b3480156104c757600080fd5b506104e260048036038101906104dd9190612692565b61161e565b005b3480156104f057600080fd5b506104f96116a4565b6040516105069190612619565b60405180910390f35b34801561051b57600080fd5b50610536600480360381019061053191906125dd565b6116ae565b604051610543919061285e565b60405180910390f35b6105546116ed565b61055d816118ab565b6000610567610d6e565b90506000600960018361057a91906128a8565b8154811061058b5761058a6128dc565b5b90600052602060002090600802019050828160050160008282546105af91906128a8565b925050819055506105be611a43565b505050565b6000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b60066020528060005260406000206000915090505481565b61062a611b0b565b8060098054905011610671576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161066890612968565b60405180910390fd5b60008190505b600160098054905061068991906128a8565b81101561074057600960018261069f9190612988565b815481106106b0576106af6128dc565b5b9060005260206000209060080201600982815481106106d2576106d16128dc565b5b906000526020600020906008020160008201548160000155600182015481600101556002820154816002015560038201548160030155600482015481600401556005820154816005015560068201548160060155600782015481600701559050508080600101915050610677565b506009805480610753576107526129bc565b5b6001900381819060005260206000209060080201600080820160009055600182016000905560028201600090556003820160009055600482016000905560058201600090556006820160009055600782016000905550509055600980549050600a8190555050565b60026020528060005260406000206000915090505481565b6107db612535565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060006040518060800160405280600081526020016000815260200160008152602001600081525090506108786114ca565b81600001818152505081604001518160200181815250506000610899610d6e565b9050600081111561095457600060096001836108b591906128a8565b815481106108c6576108c56128dc565b5b90600052602060002090600802016040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905061093b81611b92565b8360400181815250508060e00151836060018181525050505b81935050505090565b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205410156109df576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016109d690612a37565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254610a2e91906128a8565b9250508190555073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1603610aea573373ffffffffffffffffffffffffffffffffffffffff166108fc829081150290604051600060405180830381858888f19350505050158015610ae4573d6000803e3d6000fd5b50610b18565b610b17600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163383611bc3565b5b3373ffffffffffffffffffffffffffffffffffffffff167f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d582604051610b5e9190612619565b60405180910390a250565b610b71611b0b565b60008311610bb4576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bab90612aa3565b60405180910390fd5b8181118015610bc257504281115b610c01576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610bf890612b0f565b60405180910390fd5b60006009805490501480610c4a575060096001600980549050610c2491906128a8565b81548110610c3557610c346128dc565b5b90600052602060002090600802016003015482115b610c89576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c8090612b7b565b60405180910390fd5b60096040518061010001604052806001600980549050610ca99190612988565b8152602001858152602001848152602001838152602001428152602001600081526020016000815260200160008152509080600181540180825580915050600190039060005260206000209060080201600090919091909150600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a0820151816005015560c0820151816006015560e082015181600701555050600980549050600a81905550610d6983611c42565b505050565b600080600a5403610d825760009050610e69565b600060098054905090505b6000811115610e635760006009600183610da791906128a8565b81548110610db857610db76128dc565b5b90600052602060002090600802016040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050905042816040015111158015610e3c575042816060015110155b15610e4f57806000015192505050610e69565b508080610e5b90612b9b565b915050610d8d565b50600090505b90565b610e74611b0b565b610e7e6000611cf0565b565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905090565b610ecf61255d565b60098281548110610ee357610ee26128dc565b5b906000526020600020906008020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050919050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6000600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166370a08231306040518263ffffffff1660e01b8152600401610fda919061285e565b602060405180830381865afa158015610ff7573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101b9190612bd9565b905090565b6110298161054c565b6110328161095d565b50565b600061103f610d6e565b905060008111611084576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161107b90612c52565b60405180910390fd5b61108c6116ed565b61109582611db4565b600060096001836110a691906128a8565b815481106110b7576110b66128dc565b5b90600052602060002090600802019050828160050160008282546110db9190612988565b92505081905550505050565b6000811161112a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161112190612cbe565b60405180910390fd5b73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036111da573481146111d5576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016111cc90612d2a565b60405180910390fd5b6112e9565b80600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663dd62ed3e33306040518363ffffffff1660e01b8152600401611238929190612d4a565b602060405180830381865afa158015611255573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112799190612bd9565b10156112ba576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016112b190612dbf565b60405180910390fd5b6112e8600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16333084611f8f565b5b600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060009054906101000a900460ff166113f6576001600460003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060006101000a81548160ff0219169083151502179055506003339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546114459190612988565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f2da466a7b24304f47e87fa2e1e5a81b9831ce54fec19055ce277ca2f39ba42c4826040516114929190612619565b60405180910390a250565b6114a56116ed565b6114ad611a43565b565b60075481565b6114be816110e7565b6114c781611035565b50565b6000806114d5610d6e565b9050600081036114e957600091505061161b565b600060096001836114fa91906128a8565b8154811061150b5761150a6128dc565b5b906000526020600020906008020160405180610100016040529081600082015481526020016001820154815260200160028201548152602001600382015481526020016004820154815260200160058201548152602001600682015481526020016007820154815250509050600061158282612011565b9050600061158f82612091565b90506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206040518060600160405290816000820154815260200160018201548152602001600282015481525050905060008160200151905082816116129190612988565b96505050505050505b90565b611626611b0b565b600073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16036116985760006040517f1e4fbdf700000000000000000000000000000000000000000000000000000000815260040161168f919061285e565b60405180910390fd5b6116a181611cf0565b50565b6000600a54905090565b600581815481106116be57600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b60006116f7610d6e565b90506000811161173c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161173390612c52565b60405180910390fd5b6000600960018361174d91906128a8565b8154811061175e5761175d6128dc565b5b9060005260206000209060080201905060006117d5826040518061010001604052908160008201548152602001600182015481526020016002820154815260200160038201548152602001600482015481526020016005820154815260200160068201548152602001600782015481525050612011565b905060006117e282612091565b90506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002090508181600101600082825461183b9190612988565b925050819055508281600001819055508360060154831015611892576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161188990612e51565b60405180910390fd5b8284600601819055504284600401819055505050505050565b80600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054101561192d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161192490612ebd565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600082825461197c9190612988565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546119d291906128a8565b9250508190555080600760008282546119eb91906128a8565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f79d3df6837cc49ff0e09fd3258e6e45594e0703445bb06825e9d75156eaee8f082604051611a389190612619565b60405180910390a250565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020905060008160010154905060008114611b0757600082600101819055506000611aab610d6e565b905060006009600183611abe91906128a8565b81548110611acf57611ace6128dc565b5b9060005260206000209060080201905082816007016000828254611af39190612988565b92505081905550611b04338461218d565b50505b5050565b611b136122df565b73ffffffffffffffffffffffffffffffffffffffff16611b31610f54565b73ffffffffffffffffffffffffffffffffffffffff1614611b9057611b546122df565b6040517f118cdaa7000000000000000000000000000000000000000000000000000000008152600401611b87919061285e565b60405180910390fd5b565b60008082604001518360600151611ba991906128a8565b9050808360200151611bbb9190612f0c565b915050919050565b611c3d838473ffffffffffffffffffffffffffffffffffffffff1663a9059cbb8585604051602401611bf6929190612f3d565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122e7565b505050565b611c4a611b0b565b600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff166323b872dd3330846040518463ffffffff1660e01b8152600401611ca993929190612f66565b6020604051808303816000875af1158015611cc8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cec9190612fd5565b5050565b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050816000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055508173ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e060405160405180910390a35050565b60008111611df7576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611dee90613074565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020541015611e79576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611e70906130e0565b60405180910390fd5b80600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611ec891906128a8565b9250508190555080600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000828254611f1e9190612988565b925050819055508060076000828254611f379190612988565b925050819055503373ffffffffffffffffffffffffffffffffffffffff167f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d82604051611f849190612619565b60405180910390a250565b61200b848573ffffffffffffffffffffffffffffffffffffffff166323b872dd868686604051602401611fc493929190612f66565b604051602081830303815290604052915060e01b6020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506122e7565b50505050565b60008061201d83611b92565b9050600083608001514261203191906128a8565b9050600082826120419190613100565b905060008560c00151905060008660a0015114612085578560a00151633b9aca008361206d9190613100565b6120779190612f0c565b816120829190612988565b90505b80945050505050919050565b60008082036120a35760009050612188565b6000600660003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205490506000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020604051806060016040529081600082015481526020016001820154815260200160028201548152505090506000633b9aca0082600001518661216a91906128a8565b846121759190613100565b61217f9190612f0c565b90508093505050505b919050565b6000600b60003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000209050818160020160008282546121e49190612988565b92505081905550600860009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663a9059cbb84846040518363ffffffff1660e01b8152600401612248929190612f3d565b6020604051808303816000875af1158015612267573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061228b9190612fd5565b508273ffffffffffffffffffffffffffffffffffffffff167fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e0486836040516122d29190612619565b60405180910390a2505050565b600033905090565b6000612312828473ffffffffffffffffffffffffffffffffffffffff1661237e90919063ffffffff16565b905060008151141580156123375750808060200190518101906123359190612fd5565b155b1561237957826040517f5274afe7000000000000000000000000000000000000000000000000000000008152600401612370919061285e565b60405180910390fd5b505050565b606061238c83836000612394565b905092915050565b6060814710156123db57306040517fcd7860590000000000000000000000000000000000000000000000000000000081526004016123d2919061285e565b60405180910390fd5b6000808573ffffffffffffffffffffffffffffffffffffffff16848660405161240491906131b3565b60006040518083038185875af1925050503d8060008114612441576040519150601f19603f3d011682016040523d82523d6000602084013e612446565b606091505b5091509150612456868383612461565b925050509392505050565b60608261247657612471826124f0565b6124e8565b6000825114801561249e575060008473ffffffffffffffffffffffffffffffffffffffff163b145b156124e057836040517f9996b3150000000000000000000000000000000000000000000000000000000081526004016124d7919061285e565b60405180910390fd5b8190506124e9565b5b9392505050565b6000815111156125035780518082602001fd5b6040517f1425ea4200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040518060800160405280600081526020016000815260200160008152602001600081525090565b60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600080fd5b6000819050919050565b6125ba816125a7565b81146125c557600080fd5b50565b6000813590506125d7816125b1565b92915050565b6000602082840312156125f3576125f26125a2565b5b6000612601848285016125c8565b91505092915050565b612613816125a7565b82525050565b600060208201905061262e600083018461260a565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061265f82612634565b9050919050565b61266f81612654565b811461267a57600080fd5b50565b60008135905061268c81612666565b92915050565b6000602082840312156126a8576126a76125a2565b5b60006126b68482850161267d565b91505092915050565b6126c8816125a7565b82525050565b6080820160008201516126e460008501826126bf565b5060208201516126f760208501826126bf565b50604082015161270a60408501826126bf565b50606082015161271d60608501826126bf565b50505050565b600060808201905061273860008301846126ce565b92915050565b600080600060608486031215612757576127566125a2565b5b6000612765868287016125c8565b9350506020612776868287016125c8565b9250506040612787868287016125c8565b9150509250925092565b610100820160008201516127a860008501826126bf565b5060208201516127bb60208501826126bf565b5060408201516127ce60408501826126bf565b5060608201516127e160608501826126bf565b5060808201516127f460808501826126bf565b5060a082015161280760a08501826126bf565b5060c082015161281a60c08501826126bf565b5060e082015161282d60e08501826126bf565b50505050565b6000610100820190506128496000830184612791565b92915050565b61285881612654565b82525050565b6000602082019050612873600083018461284f565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006128b3826125a7565b91506128be836125a7565b92508282039050818111156128d6576128d5612879565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082825260208201905092915050565b7f496e76616c69642072657761726420706861736520696e646578000000000000600082015250565b6000612952601a8361290b565b915061295d8261291c565b602082019050919050565b6000602082019050818103600083015261298181612945565b9050919050565b6000612993826125a7565b915061299e836125a7565b92508282019050808211156129b6576129b5612879565b5b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603160045260246000fd5b7f496e73756666696369656e7420746f6b656e2062616c616e6365000000000000600082015250565b6000612a21601a8361290b565b9150612a2c826129eb565b602082019050919050565b60006020820190508181036000830152612a5081612a14565b9050919050565b7f496e76616c69642072657761726420706572696f6420616d6f756e7400000000600082015250565b6000612a8d601c8361290b565b9150612a9882612a57565b602082019050919050565b60006020820190508181036000830152612abc81612a80565b9050919050565b7f496e76616c69642072657761726420706572696f6420696e74657276616c0000600082015250565b6000612af9601e8361290b565b9150612b0482612ac3565b602082019050919050565b60006020820190508181036000830152612b2881612aec565b9050919050565b7f496e76616c696420706572696f642073746172742074696d6500000000000000600082015250565b6000612b6560198361290b565b9150612b7082612b2f565b602082019050919050565b60006020820190508181036000830152612b9481612b58565b9050919050565b6000612ba6826125a7565b915060008203612bb957612bb8612879565b5b600182039050919050565b600081519050612bd3816125b1565b92915050565b600060208284031215612bef57612bee6125a2565b5b6000612bfd84828501612bc4565b91505092915050565b7f4e6f206163746976652072657761726420706572696f6420666f756e64000000600082015250565b6000612c3c601d8361290b565b9150612c4782612c06565b602082019050919050565b60006020820190508181036000830152612c6b81612c2f565b9050919050565b7f4465706f73697420616d6f756e742073686f756c64206e6f7420626520300000600082015250565b6000612ca8601e8361290b565b9150612cb382612c72565b602082019050919050565b60006020820190508181036000830152612cd781612c9b565b9050919050565b7f56616c7565206d69736d61746368000000000000000000000000000000000000600082015250565b6000612d14600e8361290b565b9150612d1f82612cde565b602082019050919050565b60006020820190508181036000830152612d4381612d07565b9050919050565b6000604082019050612d5f600083018561284f565b612d6c602083018461284f565b9392505050565b7f496e73756666696369656e7420616c6c6f77616e636500000000000000000000600082015250565b6000612da960168361290b565b9150612db482612d73565b602082019050919050565b60006020820190508181036000830152612dd881612d9c565b9050919050565b7f52657761726420646973747269627574696f6e2073686f756c64206265206d6f60008201527f6e6f746f6e696320696e6372656173696e670000000000000000000000000000602082015250565b6000612e3b60328361290b565b9150612e4682612ddf565b604082019050919050565b60006020820190508181036000830152612e6a81612e2e565b9050919050565b7f4e6f7420656e6f75676820746f6b656e73207374616b65640000000000000000600082015250565b6000612ea760188361290b565b9150612eb282612e71565b602082019050919050565b60006020820190508181036000830152612ed681612e9a565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000612f17826125a7565b9150612f22836125a7565b925082612f3257612f31612edd565b5b828204905092915050565b6000604082019050612f52600083018561284f565b612f5f602083018461260a565b9392505050565b6000606082019050612f7b600083018661284f565b612f88602083018561284f565b612f95604083018461260a565b949350505050565b60008115159050919050565b612fb281612f9d565b8114612fbd57600080fd5b50565b600081519050612fcf81612fa9565b92915050565b600060208284031215612feb57612fea6125a2565b5b6000612ff984828501612fc0565b91505092915050565b7f5374616b65206d757374206265206120706f73697469766520616d6f756e742060008201527f67726561746572207468616e2030000000000000000000000000000000000000602082015250565b600061305e602e8361290b565b915061306982613002565b604082019050919050565b6000602082019050818103600083015261308d81613051565b9050919050565b7f4e6f7420656e6f75676820746f6b656e7320746f207374616b65000000000000600082015250565b60006130ca601a8361290b565b91506130d582613094565b602082019050919050565b600060208201905081810360008301526130f9816130bd565b9050919050565b600061310b826125a7565b9150613116836125a7565b9250828202613124816125a7565b9150828204841483151761313b5761313a612879565b5b5092915050565b600081519050919050565b600081905092915050565b60005b8381101561317657808201518184015260208101905061315b565b60008484015250505050565b600061318d82613142565b613197818561314d565b93506131a7818560208601613158565b80840191505092915050565b60006131bf8284613182565b91508190509291505056fea2646970667358221220c964e71fcb995211434123c6c0246a0f9d5aae527c0bb02bde80255a53d7d7ec64736f6c63430008180033",
  "devdoc": {
    "errors": {
      "AddressEmptyCode(address)": [
        {
          "details": "There's no code at `target` (it is not a contract)."
        }
      ],
      "AddressInsufficientBalance(address)": [
        {
          "details": "The ETH balance of the account is not enough to perform the operation."
        }
      ],
      "FailedInnerCall()": [
        {
          "details": "A call to an address target failed. The target may have reverted."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ],
      "SafeERC20FailedOperation(address)": [
        {
          "details": "An operation with an ERC20 token failed."
        }
      ]
    },
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "notice": "Pool contract to distribute reward tokens among LP token stakers proportionally to the amount and duration of the their stakes. The owner can setup multiple reward periods each one with a pre-allocated amount of reward tokens to be distributed. Users are free to add and remove tokens to their stake at any time. Users can also claim their pending reward at any time. The pool implements an efficient O(1) algo to distribute the rewards based on this paper: https://uploads-ssl.webflow.com/5ad71ffeb79acc67c8bcdaba/5ad8d1193a40977462982470_scalable-reward-distribution-paper.pdf",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 8,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 2905,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "token",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 2909,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "balances",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2912,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "usersArray",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 2916,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "users",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 1909,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "stakers",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 1913,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "stakes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1915,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "totalStakes",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 2101,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "rewardToken",
        "offset": 0,
        "slot": "8",
        "type": "t_contract(IERC20)225"
      },
      {
        "astId": 2105,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "_rewardPeriods",
        "offset": 0,
        "slot": "9",
        "type": "t_array(t_struct(RewardPeriod)2082_storage)dyn_storage"
      },
      {
        "astId": 2108,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "rewardPeriodsCount",
        "offset": 0,
        "slot": "10",
        "type": "t_uint256"
      },
      {
        "astId": 2126,
        "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
        "label": "userInfos",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_struct(UserInfo)2089_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(RewardPeriod)2082_storage)dyn_storage": {
        "base": "t_struct(RewardPeriod)2082_storage",
        "encoding": "dynamic_array",
        "label": "struct StakingRewardPool.RewardPeriod[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IERC20)225": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_struct(UserInfo)2089_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct StakingRewardPool.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)2089_storage"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(RewardPeriod)2082_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewardPool.RewardPeriod",
        "members": [
          {
            "astId": 2067,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "id",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2069,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "reward",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2071,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "from",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          },
          {
            "astId": 2073,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "to",
            "offset": 0,
            "slot": "3",
            "type": "t_uint256"
          },
          {
            "astId": 2075,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "lastUpdated",
            "offset": 0,
            "slot": "4",
            "type": "t_uint256"
          },
          {
            "astId": 2077,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "totalStaked",
            "offset": 0,
            "slot": "5",
            "type": "t_uint256"
          },
          {
            "astId": 2079,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "rewardPerTokenStaked",
            "offset": 0,
            "slot": "6",
            "type": "t_uint256"
          },
          {
            "astId": 2081,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "totalRewardsPaid",
            "offset": 0,
            "slot": "7",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "256"
      },
      "t_struct(UserInfo)2089_storage": {
        "encoding": "inplace",
        "label": "struct StakingRewardPool.UserInfo",
        "members": [
          {
            "astId": 2084,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "userRewardPerTokenStaked",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 2086,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "pendingRewards",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 2088,
            "contract": "contracts/StakingRewardPool.sol:StakingRewardPool",
            "label": "rewardsPaid",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}